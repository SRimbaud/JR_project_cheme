OK j'ai fini l'interface des primitives faut juste toutes les coder maintenant.

Une primitive est un object de type SFS_PRIM.
Elle posséde un pointeur de fonction et un pointeur
sur object. Ce second pointeur est name il permet
de connaitre le nom de la primitive ce qui peut être utile
pour l'affichage d'une primitive.

J'ai corrigé un bug d'affichage des pairs du à sfs_eval au niveau 
du var.

Pour une primitive : sfs_eval la considère comme un symbole et va
donc la chercher en mémoire. Si elle la trouve elle regarde sa valeur.
Si cette valeur est de type sfs_PRIM alors sfs_eval évalue itérativement
chaque argument donné à la paire.
Ensuite elle applique la primitive à cette évaluation.



La logique pour les opérateurs est la suivante :

Je définis l'opération sur le type num.
Je définis l'opération sur 2 objects.* 
Je définis la primitive qui est elle chargée des allocations.



On fait attention sur la somme. Je somme tout dans le premier élément 
des arguments donnés. Cependant il faut bien COPIER cet élément sinon
on le modifie et ça on veut pas !


J'ai ajouté la somme, le produit, la soustraction la division et ce
en gérant tous mes types, réels, entiers, infinis.
Je remarque des pb dans l'affichage lors de mes divisions avec l'infini ou zéro.
Je sais pas d'ou ça vient.
A voir.
Je suis content quand même les primitives ça se code assez vite et les opérateurs mathématiques ce sont
les plus longs à réaliser car il y a beaucoup de cas.


*Cette fonction prend l'object résultat en paramètre.
C'est important car lorsqu'on va ajouter un par un les objects
on ne veut pas en allouer un nouveau à chaque appel de la somme d'object
on aura un truc type 
for( ...)
	resultat += valeur.
Si à chaque += on réalloue c'est beaucoup trop.
