Implémentation des fonctions :

void affiche(void)
{
	printf("Je");
	printf("suis là");
}
double norm2(double v1, double v2)
{
	doule tmp = v1*v1 +v2*v2 ;
	return(sqrt(tmp));
}
Fonction définie par son type de retour, ses
paramètres, et ses instructions.

Formes incrément 4 : begin, lambda
On commence par implémenter begin avant lambda.
Une fonction en scheme est contenue toute entière dans
lambda. C'est une fonction dont on ne donne pas le nom.
En scheme on nomme une fonction en associant a un objet 
une fonction anonyme.

On nomme une fonction avec define :
(define norm2 (lambda (x) (+ x 2)))
On peut le raccourcir grâce à une extension syntaxique :
(define (norm2 x y) (+ x 2))
Qu'on va chercher à transformer dans l'expression précédente.
A faire à la fin.

Evaluation d'une fonction lambda c'est un compound qui
est défini en mémoire.


(norm2 1 2)
On évalue le compound sur ses arguments. ça consiste à reprend.
begin :
Permet d'évaluer des S-expressions les unes après les autres.
les printf correspondent au bloc begin.
begin c'est l'équivalent des accolades en C.
ça définit un bloc.


Forme let :

Ré-écriture sous forme de lambda de
(let (x 2) (y 3)
	(* x y) )
On définit un sous environnement dans lequel on affecte les variables
et on fait le calcul.

L'environnement du compound c'est celui dans lequel le lambda 
a été évalué.

"Fonction sans paramètre ressemble bcp à beginé"
François Cayre.
Fonction qui ajoute 2 à son argument :
(lambda (x) (+ x 2))
J'ai caractérisé la fonction par son argument, ce qu'elle renvoi
et ce qu'elle fait.
Pour l'utiliser il faut la nommer.
Pour évaluer cette chose là :
((lambda (x) (+ x 2) 43)


Ce serai pas mal de donner un environnement en argument à sfs_eval.


Comment évaluer une fonction définie par lambda :

On évalue en créant un autre environnement uniquement pour l'évaluation
dans lequel on va avoir les paramètres formels ave leurs valeurs.
L'environnement pointe son parent pour pouvoir avoir accès aux formes
primitives ect.... .
